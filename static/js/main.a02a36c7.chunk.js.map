{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Evento.js","components/Eventos.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","uk-margin","title","Formulario","nombreEventoRef","React","createRef","categoriaRef","mostrarOpciones","key","categoria","_this","categorias","id","name_localized","value","buscarEvento","e","preventDefault","datosBusqueda","nombre","current","obtenerEventos","Object","keys","this","onSubmit","ref","type","placeholder","map","Component","Evento","info","name","desc","description","text","length","substr","logo","src","url","alt","href","target","Eventos","uk-grid","eventos","components_Evento","App","token","state","obtenerCategorias","_callee","regenerator_default","wrap","_context","prev","next","concat","fetch","then","respuesta","json","setState","categories","stop","_callee2","busqueda","_context2","evento","events","components_Header","components_Formulario","components_Eventos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a02a36c7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = (props) =>{\n    return(\n        <header className='uk-margin' uk-margin='true'>\n            <h1 className='uk-text-center'>{props.title}</h1>\n        </header>\n    )\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Formulario extends Component {\n\n    nombreEventoRef = React.createRef()\n    categoriaRef = React.createRef()\n\n    mostrarOpciones = (key) => {\n        const categoria = this.props.categorias[key]\n        const {id, name_localized} = categoria\n\n        if(!id || !name_localized) return null\n\n        return(\n            <option value={id} key={id}>\n                {name_localized}\n            </option>\n        )\n    }\n\n    buscarEvento = (e) => {\n        e.preventDefault()\n        //crear objeto\n        const datosBusqueda = {\n            nombre: this.nombreEventoRef.current.value,\n            categoria: this.categoriaRef.current.value\n        }\n        //pasarlo por props\n        this.props.obtenerEventos(datosBusqueda)\n    }\n\n    render(){\n        const categorias = Object.keys(this.props.categorias)\n\n        return(\n            <form onSubmit={this.buscarEvento}>\n                <fieldset className='uk-fieldset uk-margin'>\n                    <legend className='uk-legend uk-text-center'>\n                        Busca tu evento por nombre o categoria\n                    </legend>\n                    <div className='uk-column-1-3@m uk-margin'>\n                        <div className='uk-margin' uk-margin='true'>\n                            <input ref={this.nombreEventoRef} className='uk-input' type=\"text\" placeholder='Nombre de evento o Ciudad' />\n                        </div>\n                        <div className='uk-margin' uk-margin='true'>\n                            <select ref={this.categoriaRef} className='uk-select'>\n                                { categorias.map(this.mostrarOpciones) }\n                            </select>\n                        </div>\n                        <div className='uk-margin' uk-margin='true'>\n                            <button className='uk-button uk-button-danger'> Buscar </button>\n                        </div>\n                    </div>\n                </fieldset>\n            </form>\n        )\n    }\n}\n\nFormulario.propTypes = {\n    obtenerEventos: PropTypes.func.isRequired,\n    categorias: PropTypes.array.isRequired\n}\n\nexport default Formulario\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Evento = (props) => {\n    const {name} = props.info\n\n    if(!name) return null\n\n    let desc = props.info.description.text\n\n    if(desc.length > 250){\n        desc = desc.substr(0,250)\n    }\n    return(\n        <div>\n            <div className='uk-card uk-card-default'>\n                <div className='uk-card-media-top'>\n                    {props.info.logo !== null ?\n                        <img src={props.info.logo.url} alt={props.info.name.text} />\n                        : ''\n                    }\n                </div>\n                <div className='uk-card-body'>\n                    <h3 className='uk-card-title'>{props.info.name.text}</h3>\n                    <p>{desc}</p>\n                </div>\n                <div className='uk-card-footer'>\n                    <a href={props.info.url} target='_blank' className='uk-button uk-button-secondary'> Mas info</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nEvento.propTypes = {\n    info: PropTypes.object.isRequired\n}\n\nexport default Evento\n","import React, { Component } from 'react'\nimport Evento from './Evento'\nimport PropTypes from 'prop-types'\n\nclass Eventos extends Component {\n    render(){\n        return(\n            <div className='uk-child-width-1-3@m' uk-grid='true'>\n                {Object.keys(this.props.eventos).map(key => (\n                    <Evento\n                        key={key}\n                        info={this.props.eventos[key]}\n                    />\n                ))}\n            </div>\n\n        )\n    }\n}\n\nEventos.propTypes = {\n    eventos: PropTypes.array.isRequired\n}\n\nexport default Eventos\n","import React, { Component } from 'react'\nimport Header from './components/Header'\nimport Formulario from './components/Formulario'\nimport Eventos from './components/Eventos'\n\nclass App extends Component {\n\n    token = '5AOEYM3NBTIUU7PYYSMS'\n\n    state = {\n        categorias: [],\n        eventos: []\n    }\n\n    componentDidMount(){\n        this.obtenerCategorias()\n    }\n\n    obtenerCategorias = async () => {\n        let url = `https://www.eventbriteapi.com/v3/categories/?token=${this.token}&locale=es_ES`\n        await fetch(url)\n            .then(respuesta => {\n                return respuesta.json()\n            })\n            .then(categorias => {\n                this.setState({\n                    categorias: categorias.categories\n                })\n            })\n    }\n\n    obtenerEventos = async (busqueda) => {\n        const { nombre, categoria } = busqueda\n        let url = `https://www.eventbriteapi.com/v3/events/search/?q=${nombre}&categories=${categoria}&sort_by=date&locale=es_AR&token=${this.token}`\n\n        await fetch(url)\n            .then(respuesta => {\n                return respuesta.json()\n            })\n            .then(evento => {\n                this.setState({\n                    eventos: evento.events\n                })\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header title='Eventos'/>\n                <div className='uk-container'>\n                    <Formulario\n                        categorias={this.state.categorias}\n                        obtenerEventos={this.obtenerEventos}\n                    />\n                    <Eventos\n                        eventos={this.state.eventos}\n                    />\n                </div>\n                <p className='uk-text-center'><i>Powered by <a href=\"https://www.eventbriteapi.com\">Eventbrite</a></i></p>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}